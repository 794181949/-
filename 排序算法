1.冒泡排序：冒泡排序（英语：Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。
#include <stdio.h>
void bubble_sort(int arr[], int len)
{
  int i, j, temp;
  for (i=0; i<len -1; i++)
    for (j=0; j<len-1 - i; j++)
      if (arr[j] > arr[j+1])
      {
        temp = arr[j];
        arr[j] = arr[j+1];
        arr[j+1] = temp;
       }
 }
 int main(){
  int arr[] = {22,32,42,523,212,53};
  int len = (int) sizeof(arr)/ sizeof(*arr);
  bubble_sort(arr,len);
  int i;
  for (i=0; i <len; i++)
    printf("%d", arr[i]);
   return 0;
  }
2.选择排序：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。
void swap (int *a, int*b)
{
  int temp = *a;
  *a = *b;
  *b = temp;
 }
 void selection_sort(int arr[], int len)
 {
  int i,j;
  for (i = 0; i< len-1; i++)
  {
    int min = i;
    for (j =i+1; j<len; j++) //走访所有未排序的元素
      if (arr[j]<arr[min]) //找到目前最小值
        min = j; //记录最小值
        swap(&arr[min],&arr[i]);//交换位置
    }
   }
   
   3.插入排序：它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，
   找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到 {\displaystyle O(1)} {\displaystyle O(1)}的额外空间的排序），
   因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。
   void insertion_sor(int arr[], int len){
    int i, j, temp;
    for ( i =1; i<len; i++){
      temp = arr[i]； //暂时的数字是i位置的
      for (j = i; j>0 && arr[j-1]>temp; j--) // 当j-1位置的数字比i位置的数字大的时候，j位置的等于j-1位置的数字
        arr[j] = arr[j-1];//把已排序的元素逐步后移
      arr[j] = temp;
     }
    }
